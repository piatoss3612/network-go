// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: todo/v1/todo.proto

package todo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TodoService_Create_FullMethodName     = "/TodoService/Create"
	TodoService_CreateMany_FullMethodName = "/TodoService/CreateMany"
	TodoService_Get_FullMethodName        = "/TodoService/Get"
	TodoService_GetAll_FullMethodName     = "/TodoService/GetAll"
	TodoService_Update_FullMethodName     = "/TodoService/Update"
	TodoService_UpdateMany_FullMethodName = "/TodoService/UpdateMany"
	TodoService_Delete_FullMethodName     = "/TodoService/Delete"
	TodoService_DeleteAll_FullMethodName  = "/TodoService/DeleteAll"
)

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	Create(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*Todo, error)
	CreateMany(ctx context.Context, opts ...grpc.CallOption) (TodoService_CreateManyClient, error)
	Get(ctx context.Context, in *GetTodoRequest, opts ...grpc.CallOption) (*Todo, error)
	GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TodoService_GetAllClient, error)
	Update(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*UpdateTodoResponse, error)
	UpdateMany(ctx context.Context, opts ...grpc.CallOption) (TodoService_UpdateManyClient, error)
	Delete(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*DeleteTodoResponse, error)
	DeleteAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeleteTodoResponse, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) Create(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, TodoService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) CreateMany(ctx context.Context, opts ...grpc.CallOption) (TodoService_CreateManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[0], TodoService_CreateMany_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceCreateManyClient{stream}
	return x, nil
}

type TodoService_CreateManyClient interface {
	Send(*CreateTodoRequest) error
	Recv() (*Todo, error)
	grpc.ClientStream
}

type todoServiceCreateManyClient struct {
	grpc.ClientStream
}

func (x *todoServiceCreateManyClient) Send(m *CreateTodoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceCreateManyClient) Recv() (*Todo, error) {
	m := new(Todo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) Get(ctx context.Context, in *GetTodoRequest, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, TodoService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TodoService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[1], TodoService_GetAll_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoService_GetAllClient interface {
	Recv() (*Todo, error)
	grpc.ClientStream
}

type todoServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *todoServiceGetAllClient) Recv() (*Todo, error) {
	m := new(Todo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) Update(ctx context.Context, in *UpdateTodoRequest, opts ...grpc.CallOption) (*UpdateTodoResponse, error) {
	out := new(UpdateTodoResponse)
	err := c.cc.Invoke(ctx, TodoService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) UpdateMany(ctx context.Context, opts ...grpc.CallOption) (TodoService_UpdateManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[2], TodoService_UpdateMany_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceUpdateManyClient{stream}
	return x, nil
}

type TodoService_UpdateManyClient interface {
	Send(*UpdateTodoRequest) error
	CloseAndRecv() (*UpdateTodoResponse, error)
	grpc.ClientStream
}

type todoServiceUpdateManyClient struct {
	grpc.ClientStream
}

func (x *todoServiceUpdateManyClient) Send(m *UpdateTodoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceUpdateManyClient) CloseAndRecv() (*UpdateTodoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateTodoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) Delete(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*DeleteTodoResponse, error) {
	out := new(DeleteTodoResponse)
	err := c.cc.Invoke(ctx, TodoService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) DeleteAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeleteTodoResponse, error) {
	out := new(DeleteTodoResponse)
	err := c.cc.Invoke(ctx, TodoService_DeleteAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations should embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	Create(context.Context, *CreateTodoRequest) (*Todo, error)
	CreateMany(TodoService_CreateManyServer) error
	Get(context.Context, *GetTodoRequest) (*Todo, error)
	GetAll(*Empty, TodoService_GetAllServer) error
	Update(context.Context, *UpdateTodoRequest) (*UpdateTodoResponse, error)
	UpdateMany(TodoService_UpdateManyServer) error
	Delete(context.Context, *DeleteTodoRequest) (*DeleteTodoResponse, error)
	DeleteAll(context.Context, *Empty) (*DeleteTodoResponse, error)
}

// UnimplementedTodoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) Create(context.Context, *CreateTodoRequest) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTodoServiceServer) CreateMany(TodoService_CreateManyServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateMany not implemented")
}
func (UnimplementedTodoServiceServer) Get(context.Context, *GetTodoRequest) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTodoServiceServer) GetAll(*Empty, TodoService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedTodoServiceServer) Update(context.Context, *UpdateTodoRequest) (*UpdateTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTodoServiceServer) UpdateMany(TodoService_UpdateManyServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateMany not implemented")
}
func (UnimplementedTodoServiceServer) Delete(context.Context, *DeleteTodoRequest) (*DeleteTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTodoServiceServer) DeleteAll(context.Context, *Empty) (*DeleteTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).Create(ctx, req.(*CreateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_CreateMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).CreateMany(&todoServiceCreateManyServer{stream})
}

type TodoService_CreateManyServer interface {
	Send(*Todo) error
	Recv() (*CreateTodoRequest, error)
	grpc.ServerStream
}

type todoServiceCreateManyServer struct {
	grpc.ServerStream
}

func (x *todoServiceCreateManyServer) Send(m *Todo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceCreateManyServer) Recv() (*CreateTodoRequest, error) {
	m := new(CreateTodoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).Get(ctx, req.(*GetTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServiceServer).GetAll(m, &todoServiceGetAllServer{stream})
}

type TodoService_GetAllServer interface {
	Send(*Todo) error
	grpc.ServerStream
}

type todoServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *todoServiceGetAllServer) Send(m *Todo) error {
	return x.ServerStream.SendMsg(m)
}

func _TodoService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).Update(ctx, req.(*UpdateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_UpdateMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).UpdateMany(&todoServiceUpdateManyServer{stream})
}

type TodoService_UpdateManyServer interface {
	SendAndClose(*UpdateTodoResponse) error
	Recv() (*UpdateTodoRequest, error)
	grpc.ServerStream
}

type todoServiceUpdateManyServer struct {
	grpc.ServerStream
}

func (x *todoServiceUpdateManyServer) SendAndClose(m *UpdateTodoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceUpdateManyServer) Recv() (*UpdateTodoRequest, error) {
	m := new(UpdateTodoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).Delete(ctx, req.(*DeleteTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoService_DeleteAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).DeleteAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TodoService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TodoService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TodoService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TodoService_Delete_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _TodoService_DeleteAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateMany",
			Handler:       _TodoService_CreateMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAll",
			Handler:       _TodoService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateMany",
			Handler:       _TodoService_UpdateMany_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "todo/v1/todo.proto",
}
